public without sharing class CaseService {
    public static final String NEUTRAL_TONE = System.Label.cu_NeutralFeedback;
    public static final String PRAISE_TONE = System.Label.cu_Praise;
    public static final String COMPLAINT_TONE = System.Label.cu_Complaint;

    public static final String REQUEST_SEATS = System.Label.cu_SeatPreference;
    public static final String REQUEST_MEALS = System.Label.cu_Meals;
    public static final String REQUEST_ELSE = System.Label.cu_SomethingElse;

    public static final String PROBLEMS_ACCESSING_BOOKING = System.Label.cu_ProblemsAccessingYourBooking;
    public static final String PROBLEMS_CANCELLING_A_BOOKING = System.Label.cu_ProblemsCancellingABooking;
    public static final String PROBLEMS_EXCHANGING_BOOKING = System.Label.cu_ProblemsExchangingABooking;
    public static final String PROBLEMS_MAKING_A_BOOKING = System.Label.cu_ProblemsMakingABooking;
    public static final String PROBLEMS_MAKING_PAYMENT = System.Label.cu_ProblemsMakingAPayment;
    public static final String PROBLEMS_ON_YOUR_JOURNEY = System.Label.cu_OnYourJourney;
    public static final String PROBLEMS_OVER_THE_PHONE = System.Label.cu_OverThePhone;

    public static final String SPECIAL_ASSISTANCE = System.Label.cu_SpecialAssistance;
    public static final String SPECIAL_ASSISTANCE_DOGS = System.Label.cu_AssistanceAnimals;
    public static final String SPECIAL_ASSISTANCE_KIDS = System.Label.cu_TravellingWithChildren;
    public static final String SPECIAL_ASSISTANCE_UNACCOMPANIED_MINORS = System.Label.cu_UnaccompaniedMinors;
    public static final String SPECIAL_ASSISTANCE_URGENT = System.Label.cu_UrgentSpecialAssistance;
    public static final String SPECIAL_ASSISTANCE_WHEELCHAIR = System.Label.cu_WheelchairTravel;

    public static final String EUROSTAR_CLUB_ACCOUNT_QUERY = System.Label.cu_AccountQuery;
    public static final String EUROSTAR_CLUB_CHANGES_PERSONAL_INFO = System.Label.cu_ChangesToMyPersonalInformation;
    public static final String EUROSTAR_CLUB_JOINING = System.Label.cu_ThinkingOfJoining;
    public static final String EUROSTAR_CLUB_JOURNEY_OR_MISSING_POINTS = System.Label.cu_AddingJourneyOrMissingPoints;
    public static final String EUROSTAR_CLUB_LOUNGE_ROOM_BOOKING = System.Label.cu_LoungeMeetingRoomBooking;
    public static final String EUROSTAR_CLUB_QUESTION = System.Label.cu_Question;
    public static final String EUROSTAR_CLUB_RENEWAL_OF_PURCHASE = System.Label.cu_subscriptions_CTArenewalOfPurchase;
    public static final String EUROSTAR_CLUB_RENEWAL_OR_PURCHASE = 'Renewal or Purchase';
    public static final String EUROSTAR_CLUB_TROUBLE_ACCESSING_ACC = System.Label.cu_TroubleAccessingMyAccount;

    public static final String QUESTION_BREXIT = System.Label.cu_Brexit;
    public static final String QUESTION_CANCELLATION_COMPENSATION = System.Label.cu_CompensationForCancellation;
    public static final String QUESTION_CANCELLATIONS_REFUNDS = System.Label.cu_CancellationsAndRefunds;
    public static final String QUESTION_CATERING = System.Label.cu_Catering;
    public static final String QUESTION_CONNECTING_TRAVEL = System.Label.cu_ConnectingTravel;
    public static final String QUESTION_CORONAVIRUS = System.Label.cu_CoronavirusDisruption;
    public static final String QUESTION_CURRENT_DISRUPTION = System.Label.cu_HelpWithCurrentDisruption;
    public static final String QUESTION_DELAY_COMPENSATION = System.Label.cu_CompensationForDelay;
    public static final String QUESTION_DESTINATIONS = System.Label.cu_Destinations;
    public static final String QUESTION_ELSE = System.Label.cu_SmthWeHaventThoughtOf;
    public static final String QUESTION_EXCHANGES = System.Label.cu_Exchanges;
    public static final String QUESTION_EXPENSES = System.Label.cu_Expenses;
    public static final String QUESTION_FUTURE_DISRUPTION_INFO = System.Label.cu_FutureDisruptionInfo;
    public static final String QUESTION_GETTING_TICKETS = System.Label.cu_GettingYourTickets;
    public static final String QUESTION_GIFT_VOUCHERS = System.Label.cu_IWouldLikeToPurchaseGiftVouchers;
    public static final String QUESTION_HELP_DOING = System.Label.cu_HelpDoingSomething;
    public static final String QUESTION_HELP_FINDING = System.Label.cu_HelpFindingInformation;
    public static final String QUESTION_HOW_TO_USE_VOUCHER = System.Label.cu_HowDoIUseMyVoucher;
    public static final String QUESTION_LIVE_DEPARTURES_ARRIVALS = System.Label.cu_LiveDeparturesAndArrivals;
    public static final String QUESTION_LOST_VOUCHER = System.Label.cu_IHaveLostMyVoucher;
    public static final String QUESTION_LUGGAGE_ALLOWANCE = System.Label.cu_LuggageAllowance;
    public static final String QUESTION_LUGGAGE_INFO = System.Label.cu_GeneralInformation;
    public static final String QUESTION_NAMES_AND_OTHER_DETAILS = System.Label.cu_NamesAndOtherPersonalDetails;
    public static final String QUESTION_ONLINE_HELP = System.Label.cu_OnlineAccountHelp;
    public static final String QUESTION_PROBLEMS_WITH_VOUCHER = System.Label.cu_ProblemsWithAnExistingVoucher;
    public static final String QUESTION_PROHIBITTED_LUGGAGE = System.Label.cu_ProhibitedAndRestrictedItems;
    public static final String QUESTION_REPORT_PROBLEM = System.Label.cu_ReportAProblem;
    public static final String QUESTION_RESET_PASSWORD = System.Label.cu_ResetMyPassword;
    public static final String QUESTION_SEATING = System.Label.cu_Seating;
    public static final String QUESTION_TIMETABLE = System.Label.cu_TimetableInformation;
    public static final String QUESTION_TRANSFER = System.Label.cu_TransferTicketQuestion;
    public static final String QUESTION_TRAVEL_CLASSES = System.Label.cu_TravelClasses;
    public static final String QUESTION_TS_AND_CS = System.Label.cu_GeneralTermsAndConditions;
    public static final String QUESTION_WHAT_DO_I_NEED_TO_TRAVEL = System.Label.cu_WhatDoINeedToTravel;
    public static final String QUESTION_WIFI = System.Label.cu_Wifi;

    public static final String DESCRIPTION_BIRTH_DATE = 'Birth Date: ';
    public static final String DESCRIPTION_BOOKING_DATE = 'Booking Date: ';
    public static final String DESCRIPTION_BOOKING_LOCATION = 'Booking Location: ';
    public static final String DESCRIPTION_MEMBERSHIP_NUMBER = 'Membership Number: ';

    public static final String CASE_LOYALTY_CATEGORY_INFORMATION = 'Loyalty program information';
    public static final String CASE_LOYALTY_SUBSCRIPTION_QUESTION = 'Subscription Question';
    public static final String CASE_LOYALTY_TOPIC_BOOKING = 'Customer Room Booking';

    public static final String CASE_CATEGORY_DOCREQUEST = 'Document request';
    public static final String CASE_CATEGORY_PRETRAVEL = 'Pre Travel';
    public static final String CASE_CATEGORY_SUBSCRIPTIONS = 'Subscriptions';

    public static final String CASE_TOPIC_ADDITIONALCHARGES = 'Additional Charges';
    public static final String CASE_TOPIC_BIKE = 'Bikes';
    public static final String CASE_TOPIC_BOOKINGCONFIRMATION = 'Booking Confirmation';
    public static final String CASE_TOPIC_CREDITNOTES = 'Credit Notes';
    public static final String CASE_TOPIC_HISTORY = 'History';
    public static final String CASE_TOPIC_INVOICES = 'Invoices';
    public static final String CASE_TOPIC_LUGGAGE = 'Luggage';
    public static final String CASE_TOPIC_PROFORMA = 'Proforma';
    public static final String CASE_TOPIC_RECEIPTS = 'Receipts';
    public static final String CASE_TOPIC_STATIONINFORMATION = 'Station Information';
    public static final String CASE_TOPIC_TRAVELPROOF = 'Travel Proof';
    public static final String CASE_TOPIC_WEBFORMCASE = 'Webform case - please review';

    public static final String CASE_CONTACTREASON_BUYORBOOK = 'Buy or Book';
    public static final String CASE_CONTACTREASON_INFOADVICE = 'Info or Advice or Confirmation';
    public static final String CASE_CONTACTREASON_ROOMBOOKING = 'Customer Room Booking';
    public static final String CASE_CONTACTREASON_ROOMBOOKINGS = 'Customer room bookings';
    public static final String CASE_INITIALREASON_DISRUPTION = 'Disruption';
    public static final String CASE_RECORDTYPENAME_B2BBOOKING = 'B2B_group_booking';
    public static final String CASE_RETURNORSINGLE_RETURN = 'Return';
    public static final String CASE_RETURNORSINGLE_SINGLE = 'Single';
    public static final String CASE_STRUGGLE_DONTWANTONLINE = 'Don\'t Want To Do This Online';
    public static final String CASE_STRUGGLE_MOREINFO = 'Need More Information';
    public static final String CASE_STRUGGLE_WEBFORMCASE = 'Webform case - please review';
    public static final String CASE_SUBJECT_B2B_GROUPS = 'B2B Groups';

    public static final String CASE_QUESTION_ALLOWED = 'What Is Allowed or Not Allowed?';
    public static final String CASE_QUESTION_LOST_SOMETHING = 'I\'ve lost something';
    public static final String CASE_QUESTION_OFFER = 'What Do You Offer?';
    public static final String CASE_QUESTION_PROOF_CANCEL = 'Proof of cancellation';
    public static final String CASE_QUESTION_PROOF_DISRUPTION = 'Proof of disruption';
    public static final String CASE_QUESTION_PROOF_TRAVEL = 'Proof of travel';
    public static final String CASE_QUESTION_REASSURENCE = 'Reassurance Or Confirmation Needed';

    public static final String CASE_PRIORITY_HIGH = 'High';
    public static final String CASE_STATUS_CLOSED = 'Closed';
    public static final String CASE_STATUS_NEW = 'New';

    public static final String CASE_JOURNEY_PRODUCT_CONTINENT = 'Luggage - Continent';
    public static final String CASE_JOURNEY_PRODUCT_LONDON = 'Luggage - London';

    public static final String CASE_CARRIER_RED = 'Red';
    public static final String CASE_CARRIER_BLUE = 'Blue';

    public static final String ASSISTANCE_BRANDING = System.Label.cu_Branding;
    public static final String ASSISTANCE_CATERING = System.Label.cu_Catering;
    public static final String ASSISTANCE_CHARTER = System.Label.cu_Charter;
    public static final String ASSISTANCE_EXCLUSIVECARRIAGE = System.Label.cu_ExclusiveCarriage;
    public static final String ASSISTANCE_EXPERIENCE = 'Experience';
    public static final String ASSISTANCE_HALFCHARTER = System.Label.cu_HalfCharter;
    public static final String ASSISTANCE_LUGGAGE = System.Label.cu_Luggage;

    public static final String QUEUE_CLUB_EUROSTAR = 'Club_Eurostar_Queue';
    public static final String QUEUE_CUSTOMER_ROOM_BOOKING = 'Customer_Room_Bookings';
    public static final String QUEUE_DOC_REQUEST = 'Document_Request_Queue';
    public static final String QUEUE_GENERAL_INFO = 'General_Information_queue';
    public static final String QUEUE_SUBSCRIPTION = 'Subscription';

    public static final String CASE_BOOKING_SUBJECT = 'Meeting Room';
    public static final String CASE_REASON_BOOKING = 'Booking';
    public static final String CASE_REASON_MAKEBOOKING = 'Make a Booking';

    public static final String CASE_SUBJECT_PLACEHOLDER = '{0}';

    public static Map<String, Id> queuesByName = new Map<String, Id>();
    public static Map<String, String> caseWhatQuestionValues = new Map<String, String>();
    public static Map<String, String> caseTopicValues = new Map<String, String>();
    public static Map<String, String> caseReasonForContactValues = new Map<String, String>();
    public static Map<String, String> caseCustomerStruggleValues = new Map<String, String>();
    public static final List<String> queuesNames = new List<String>{
        'Exchange_Queue',
        'Disruption_Exchange_queue',
        'Disruption_Refund_queue',
        'Refund_Queue',
        'Cancel_refund_Queue',
        'Feedback_Queue',
        'Make_a_booking_Queue',
        'Reported_error_queue',
        'Assistance_Request_High_Priority',
        'Assistance_Request_Low_Priority',
        'Elite_queue',
        'ECC_Disruptions',
        QUEUE_GENERAL_INFO,
        QUEUE_SUBSCRIPTION,
        QUEUE_DOC_REQUEST,
        QUEUE_CLUB_EUROSTAR,
        QUEUE_CUSTOMER_ROOM_BOOKING
    };

    private static void getQueries() {
        List<QueueSobject> queueSobjects = [
            SELECT Queue.Id, Queue.DeveloperName
            FROM QueueSobject
            WHERE Queue.DeveloperName IN :queuesNames
        ];
        for (QueueSobject queueSobject : queueSobjects) {
            queuesByName.put(queueSobject.Queue.DeveloperName, queueSobject.Queue.Id);
        }

        List<Schema.PicklistEntry> caseWhatPickListValues = Case.What_Is_The_Question__c.getDescribe()
            .getPickListValues();
        for (Schema.PicklistEntry objPickList : caseWhatPickListValues) {
            caseWhatQuestionValues.put(objPickList.getValue().trim(), objPickList.getValue());
        }

        List<Schema.PicklistEntry> caseTopicPickListValues = Case.Topic__c.getDescribe().getPickListValues();
        for (Schema.PicklistEntry objPickList : caseTopicPickListValues) {
            caseTopicValues.put(objPickList.getValue().trim(), objPickList.getValue());
        }

        List<Schema.PicklistEntry> caseReasonPickListValues = Case.Initial_Reason_For_Contact__c.getDescribe()
            .getPickListValues();
        for (Schema.PicklistEntry objPickList : caseReasonPickListValues) {
            caseReasonForContactValues.put(objPickList.getValue().trim(), objPickList.getValue());
        }

        List<Schema.PicklistEntry> caseCustomerStrugglePickListValues = Case.Customer_Struggle__c.getDescribe()
            .getPickListValues();
        for (Schema.PicklistEntry objPickList : caseCustomerStrugglePickListValues) {
            caseCustomerStruggleValues.put(objPickList.getValue().trim(), objPickList.getValue());
        }
    }

    private static Case createBasicCase(
        cu_Utils.PnrDetails pnrItem,
        GuestDetails guestDetails,
        AccountDetails accountFromPNR,
        Account customer
    ) {
        Case newCase = new Case();
        newCase.Origin = 'Web';
        if (
            pnrItem != null &&
            String.isNotBlank(pnrItem.pnr) &&
            (pnrItem.bookingType != S3PassengerAPIService.HOTEL_ONLY)
        ) {
            newCase.PNR__c = pnrItem.pnr;
        }
        if (pnrItem != null && String.isNotBlank(pnrItem.pnr) && String.isNotBlank(guestDetails.departureDate)) {
            newCase.TCN__c = findTCNByPNRAndDepartureDate(pnrItem.pnr, guestDetails.departureDate);
        }
        if (String.isNotBlank(customer.Id)) {
            newCase.AccountId = customer.Id;
            if (String.isNotBlank(customer.PersonContactId)) {
                newCase.ContactId = customer.PersonContactId;
            }
        } else if (accountFromPNR != null && String.isNotBlank(accountFromPNR.id)) {
            newCase.AccountId = accountFromPNR.id;
            if (String.isNotBlank(accountFromPNR.contactId)) {
                newCase.ContactId = accountFromPNR.contactId;
            }
        }
        if (String.isNotBlank(guestDetails.savedFiles)) {
            // ["0682z000000EQqfAAG","0682z000000EQqgAAG","0682z000000EQqhAAG"]
            newCase.Files_Ids_System__c = guestDetails.savedFiles.remove('"').remove('[').remove(']');
        }
        if (String.isNotBlank(customer.Raw_Telephone_Number__c)) {
            newCase.Contact_Number__c = customer.Raw_Telephone_Number__c;
            newCase.SuppliedPhone = customer.Raw_Telephone_Number__c;
        }
        if (String.isNotBlank(guestDetails.message)) {
            if (pnrItem != null && pnrItem.bookingType == S3PassengerAPIService.HOTEL_ONLY) {
                newCase.Description = 'JAC Travel Ref: ' + pnrItem.pnr + '; ' + guestDetails.message;
            } else {
                newCase.Description = guestDetails.message;
            }
        }
        if (String.isNotBlank(customer.FirstName) && String.isNotBlank(customer.LastName)) {
            newCase.Customer_Name__c = customer.FirstName + ' ' + customer.LastName;
        } else if (accountFromPNR != null && String.isNotBlank(accountFromPNR.accountName)) {
            newCase.Customer_Name__c = accountFromPNR.accountName;
        }
        if (String.isBlank(newCase.Customer_Name__c)) {
            newCase.Customer_Name__c = guestDetails.firstName + ' ' + guestDetails.lastName;
        }
        if (String.isNotBlank(guestDetails.toneOfContact)) {
            newCase.Tone_of_Contact__c = guestDetails.toneOfContact;
        }
        if (String.isNotBlank(guestDetails.bicOrSwift)) {
            newCase.Swift_Sort_Code__c = guestDetails.bicOrSwift;
            if (String.isNotBlank(newCase.Description)) {
                newCase.Description = newCase.Description + '; BIC/SWIFT code: ' + guestDetails.bicOrSwift;
            } else {
                newCase.Description = 'BIC/SWIFT code: ' + guestDetails.bicOrSwift;
            }
        }
        if (String.isNotBlank(guestDetails.sortCode)) {
            newCase.Bank_Sort_Code__c = guestDetails.sortCode;
            if (String.isNotBlank(newCase.Description)) {
                newCase.Description = newCase.Description + '; Bank Sort Code: ' + guestDetails.sortCode;
            } else {
                newCase.Description = 'Bank Sort Code: ' + guestDetails.sortCode;
            }
        }
        if (String.isNotBlank(guestDetails.iban)) {
            newCase.IBAN_Account_Number__c = guestDetails.iban;
            if (String.isNotBlank(newCase.Description)) {
                newCase.Description = newCase.Description + '; IBAN: ' + guestDetails.iban;
            } else {
                newCase.Description = 'IBAN: ' + guestDetails.iban;
            }
        }
        if (String.isNotBlank(guestDetails.paypal)) {
            newCase.Paypal_email__c = guestDetails.paypal;
            if (String.isNotBlank(newCase.Description)) {
                newCase.Description = newCase.Description + '; Paypal: ' + guestDetails.paypal;
            } else {
                newCase.Description = 'Paypal: ' + guestDetails.paypal;
            }
        }
        if (String.isNotBlank(guestDetails.accountNumber)) {
            newCase.Bank_Account_Number__c = guestDetails.accountNumber;
            if (String.isNotBlank(newCase.Description)) {
                newCase.Description = newCase.Description + '; Account number: ' + guestDetails.accountNumber;
            } else {
                newCase.Description = 'Account number: ' + guestDetails.accountNumber;
            }
        }
        if (String.isNotBlank(guestDetails.bookingDate)) {
            if (String.isNotBlank(newCase.Description)) {
                newCase.Description =
                    newCase.Description +
                    '; \n' +
                    DESCRIPTION_BOOKING_DATE +
                    guestDetails.bookingDate;
            } else {
                newCase.Description = DESCRIPTION_BOOKING_DATE + guestDetails.bookingDate;
            }
        }
        if (String.isNotBlank(guestDetails.bookingLocation)) {
            if (String.isNotBlank(newCase.Description)) {
                newCase.Description =
                    newCase.Description +
                    '; \n' +
                    DESCRIPTION_BOOKING_LOCATION +
                    guestDetails.bookingLocation;
            } else {
                newCase.Description = DESCRIPTION_BOOKING_LOCATION + guestDetails.bookingLocation;
            }
        }
        if (String.isNotBlank(guestDetails.language)) {
            if (guestDetails.language.containsIgnoreCase('FR')) {
                newCase.Preferred_Language__c = 'French';
            }
            if (guestDetails.language.containsIgnoreCase('NL')) {
                newCase.Preferred_Language__c = 'Dutch';
            }
            if (guestDetails.language.containsIgnoreCase('DE')) {
                newCase.Preferred_Language__c = 'German';
            }
        }
        if (String.isNotBlank(customer.Customer_Email__pc)) {
            newCase.Email__c = customer.Customer_Email__pc;
        } else if (accountFromPNR != null && String.isNotBlank(accountFromPNR.customerEmail)) {
            newCase.Email__c = accountFromPNR.customerEmail;
        }
        Date dateOfTravel;
        if (accountFromPNR != null && accountFromPNR.departureDate != null) {
            newCase.Departure_Date__c = accountFromPNR.departureDate;
        } else {
            newCase.Departure_Date__c = dateOfTravel;
        }
        if (String.isNotBlank(guestDetails.dateOfTravel)) {
            newCase.Date_selected_Web__c = Date.valueOf(guestDetails.dateOfTravel);
        } else {
            newCase.Date_selected_Web__c = dateOfTravel;
        }
        if (accountFromPNR != null && accountFromPNR.returnDate != null) {
            newCase.Return_Date__c = accountFromPNR.returnDate;
        } else {
            newCase.Return_Date__c = dateOfTravel;
        }

        if (String.isNotBlank(guestDetails.additionalAssistance)) {
            newCase.Type_of_Assistance__c = guestDetails.additionalAssistance;
            newCase.Customer_Type__c = DLT_CaseConstants.CUSTOMER_TYPE_SPECIAL_ASSISTANCE;
        }

        if (String.isNotBlank(guestDetails.additionalAssistanceOther)) {
            newCase.Type_of_Assistance_Description__c = guestDetails.additionalAssistanceOther;
        }

        newCase.Status = DLT_CaseConstants.STATUS_NEW;

        if (Test.isRunningTest()) {
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createCaseTrainExchangeQueue(cu_Utils.PnrDetails pnrItem, GuestDetails guestDetails) {
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('New_Standard_Case')
            .getRecordTypeId();
        newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Change');
        if (pnrItem.isChangeableOnline) {
            newCase.Customer_Struggle__c = caseCustomerStruggleValues.get(
                'Don\'t Want To Use Website Or No Access To Website'
            );
        } else {
            newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Not An Online Product');
        }
        newCase.Booking_type__c = DLT_CaseConstants.BOOKING_TYPE_GENERAL_QUERY;
        newCase.OwnerId = queuesByName.get('Exchange_Queue');

        if (pnrItem.isChangeableOnline) {
            newCase.TemplateId__c = 'How_to_change_online_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
            // EmailServiceController.sendEmail(contactFromPNR, 'How_to_change_online_1');
        } else {
            newCase.TemplateId__c = 'Change_request_acknowledgement_1';
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createCaseTrainDisruptionExchangeQueue(cu_Utils.PnrDetails pnrItem, GuestDetails guestDetails) {
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('Disruption_Case')
            .getRecordTypeId();
        newCase.Travel_Based_Disruption__c = 'Delay';
        newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Disruption');
        if (pnrItem.isChangeableOnline) {
            newCase.Customer_Struggle__c = caseCustomerStruggleValues.get(
                'Don\'t Want To Use Website Or No Access To Website'
            );
        } else {
            newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Ticket Status Prevents Self Service');
        }
        newCase.Disruption_Description__c = 'Change request';
        newCase.OwnerId = queuesByName.get('Disruption_Exchange_queue');

        if (pnrItem.isFree) {
            newCase.TemplateId__c = 'Change_request_acknowledgement_2';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        } else {
            newCase.TemplateId__c = 'Change_request_fee_required_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createCaseBookingExchangeQueue(cu_Utils.PnrDetails pnrItem, GuestDetails guestDetails) {
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('Dynamic_Packages')
            .getRecordTypeId();
        if (pnrItem.bookingType == S3PassengerAPIService.TRAIN_AND_HOTEL) {
            newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Package hotel exchange');
            newCase.Subject = 'Package/change request';
            newCase.Hotel_Booking_Reference__c = accountFromPNR.hotelBooking;
        } else if (pnrItem.bookingType == S3PassengerAPIService.HOTEL_ONLY) {
            newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Standalone hotel exchange');
            newCase.Subject = 'Standalone Hotel/ change request';
            newCase.Hotel_Booking_Reference__c = accountFromPNR.hotelBooking;
        } else {
            newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Info or Advice or Confirmation');
        }
        newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Need More Information');
        newCase.OwnerId = queuesByName.get('Exchange_Queue');

        if (pnrItem.bookingType == S3PassengerAPIService.HOTEL_ONLY) {
            newCase.TemplateId__c = 'Hotel_change_request_1';
        }
        if (pnrItem.bookingType == S3PassengerAPIService.TRAIN_AND_HOTEL) {
            newCase.TemplateId__c = 'Package_change_request_1';
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createCaseBookingDisruptionExchangeQueue(
        cu_Utils.PnrDetails pnrItem,
        GuestDetails guestDetails
    ) {
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('Dynamic_Packages')
            .getRecordTypeId();
        newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Disruption');
        if (pnrItem.bookingType == S3PassengerAPIService.TRAIN_AND_HOTEL) {
            newCase.Subject = 'Package/Disruption change request';
        }
        if (pnrItem.bookingType == S3PassengerAPIService.HOTEL_ONLY) {
            newCase.Subject = 'Standalone Hotel/ Disruption change request';
            newCase.Hotel_Booking_Reference__c = accountFromPNR.hotelBooking;
        }
        newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Need More Information');
        newCase.Disruption_Description__c = 'Change request';
        newCase.OwnerId = queuesByName.get('Exchange_Queue');

        if (pnrItem.bookingType == S3PassengerAPIService.HOTEL_ONLY) {
            newCase.TemplateId__c = 'Disruption_hotel_change_1';
        }
        if (pnrItem.bookingType == S3PassengerAPIService.TRAIN_AND_HOTEL) {
            newCase.TemplateId__c = 'Disruption_package_change_1';
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createCaseTrainCancelRefundQueue(cu_Utils.PnrDetails pnrItem, GuestDetails guestDetails) {
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('What Do You Offer?');
        newCase.Category__c = 'Pre Travel';
        newCase.Topic__c = caseTopicValues.get('Webform case - please review');
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('New_Standard_Case')
            .getRecordTypeId();
        newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Refund');
        if (pnrItem.isChangeableOnline) {
            newCase.Customer_Struggle__c = caseCustomerStruggleValues.get(
                'Don\'t Want To Use Website Or No Access To Website'
            );
        } else {
            newCase.Customer_Struggle__c = caseCustomerStruggleValues.get(
                'Not An Online Product Or Not Refundable Online'
            );
        }
        newCase.Subject =
            newCase.Initial_Reason_For_Contact__c +
            ' / ' +
            CASE_SUBJECT_PLACEHOLDER +
            ' / ' +
            newCase.Customer_Struggle__c;
        newCase.OwnerId = queuesByName.get('Cancel_refund_Queue');

        if (pnrItem.isChangeableOnline) {
            newCase.TemplateId__c = 'How_to_cancel_online_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        } else {
            newCase.TemplateId__c = 'Refund_request_acknowledgement_1';
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createCaseTrainDisruptionRefundQueue(cu_Utils.PnrDetails pnrItem, GuestDetails guestDetails) {
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('Disruption_Case')
            .getRecordTypeId();
        newCase.Travel_Based_Disruption__c = 'Delay';
        newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Disruption');
        if (pnrItem.isChangeableOnline) {
            newCase.Customer_Struggle__c = caseCustomerStruggleValues.get(
                'Don\'t Want To Use Website Or No Access To Website'
            );
        } else {
            newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Ticket Status Prevents Self Service');
        }
        newCase.Disruption_Description__c = 'Refund request';
        newCase.Subject =
            newCase.Initial_Reason_For_Contact__c +
            '/ ' +
            newCase.Disruption_Description__c +
            ' / ' +
            newCase.Customer_Struggle__c;
        newCase.OwnerId = queuesByName.get('Disruption_Refund_queue');

        if (pnrItem.cancelOption == S3PassengerAPIService.NO_REFUND) {
            newCase.TemplateId__c = 'no_refund_options_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }
        if (pnrItem.cancelOption == S3PassengerAPIService.FULL_REFUND) {
            newCase.TemplateId__c = 'Refund_request_acknowledgement_2';
        }
        if (pnrItem.cancelOption == S3PassengerAPIService.REFUND_TO_VOUCHER) {
            newCase.TemplateId__c = 'refund_to_voucher_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createCaseBookingCancelRefundQueue(cu_Utils.PnrDetails pnrItem, GuestDetails guestDetails) {
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('What Do You Offer?');
        newCase.Category__c = 'Pre Travel';
        newCase.Topic__c = caseTopicValues.get('Webform case - please review');
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('Dynamic_Packages')
            .getRecordTypeId();
        newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Need More Information');
        if (pnrItem.bookingType == S3PassengerAPIService.TRAIN_AND_HOTEL) {
            newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Package hotel exchange');
            newCase.Subject = 'Package/refund request';
            newCase.Hotel_Booking_Reference__c = accountFromPNR.hotelBooking;
        }
        if (pnrItem.bookingType == S3PassengerAPIService.HOTEL_ONLY) {
            newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Standalone hotel exchange');
            newCase.Subject = 'Standalone Hotel/ refund request';
            newCase.Hotel_Booking_Reference__c = accountFromPNR.hotelBooking;
        } else {
            newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Info or Advice or Confirmation');
            newCase.Subject =
                newCase.Initial_Reason_For_Contact__c +
                '/ ' +
                CASE_SUBJECT_PLACEHOLDER +
                ' / ' +
                newCase.Customer_Struggle__c;
        }
        newCase.OwnerId = queuesByName.get('Cancel_refund_Queue');

        if (pnrItem.bookingType == S3PassengerAPIService.HOTEL_ONLY) {
            newCase.TemplateId__c = 'Hotel_refund_1';
        }
        if (pnrItem.bookingType == S3PassengerAPIService.TRAIN_AND_HOTEL) {
            newCase.TemplateId__c = 'Package_refund_1';
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createCaseBookingDisruptionRefundQueue(cu_Utils.PnrDetails pnrItem, GuestDetails guestDetails) {
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('Dynamic_Packages')
            .getRecordTypeId();
        newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Disruption');
        newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Need More Information');
        newCase.Disruption_Description__c = 'Refund request';
        newCase.OwnerId = queuesByName.get('Disruption_Refund_queue');
        if (pnrItem.bookingType == S3PassengerAPIService.TRAIN_AND_HOTEL) {
            newCase.Subject = 'Package/Disruption refund request';
        } else if (pnrItem.bookingType == S3PassengerAPIService.HOTEL_ONLY) {
            newCase.Subject = 'Standalone Hotel/ Disruption refund request';
            newCase.Hotel_Booking_Reference__c = accountFromPNR.hotelBooking;
        } else {
            newCase.Subject =
                newCase.Initial_Reason_For_Contact__c +
                '/ ' +
                newCase.Disruption_Description__c +
                ' / ' +
                newCase.Customer_Struggle__c;
        }

        if (pnrItem.bookingType == S3PassengerAPIService.HOTEL_ONLY) {
            newCase.TemplateId__c = 'Disruption_hotel_refund_1';
        }
        if (pnrItem.bookingType == S3PassengerAPIService.TRAIN_AND_HOTEL) {
            newCase.TemplateId__c = 'Disruption_package_refund_1';
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createFeedbackCase(
        cu_Utils.PnrDetails pnrItem,
        String feedbackTopic,
        String tone,
        GuestDetails guestDetails
    ) {
        getQueries();
        String toneFromForm = guestDetails.toneOfContact;
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('New_Standard_Case')
            .getRecordTypeId();
        newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Feedback');
        if (feedbackTopic == System.Label.cu_Staff) {
            newCase.Topic__c = 'Staff';
            newCase.Category__c = 'Post Travel';
        } else if (feedbackTopic == System.Label.cu_Station) {
            newCase.Topic__c = 'Station';
            newCase.Category__c = 'At The Station';
        } else if (feedbackTopic == System.Label.cu_Disruption) {
            newCase.Topic__c = 'Disruption';
            newCase.Category__c = 'Post Travel';
        } else if (feedbackTopic == System.Label.cu_OnboardExperience) {
            newCase.Topic__c = 'Onboard experience';
            newCase.Category__c = 'Onboard';
        } else if (feedbackTopic == System.Label.cu_Policy) {
            newCase.Topic__c = 'Policy';
            newCase.Category__c = 'Pre Travel';
        } else if (feedbackTopic == System.Label.cu_WebsiteOrApp) {
            newCase.Topic__c = 'Website or app';
            newCase.Category__c = 'Pre Travel';
        } else if (feedbackTopic == System.Label.cu_Communication) {
            newCase.Topic__c = 'Communication';
            newCase.Category__c = 'Pre Travel';
        } else if (feedbackTopic == System.Label.cu_ClubEurostar) {
            newCase.Topic__c = 'Club Eurostar';
            newCase.Category__c = 'Club Eurostar';
            newCase.Loyalty_Category__c = CASE_LOYALTY_CATEGORY_INFORMATION;
            newCase.Loyalty_Topic__c = 'Communications';
        } else {
            newCase.Topic__c = 'General feedback';
            newCase.Category__c = 'Post Travel';
        }
        newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('Feedback submitted');
        newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Customer giving feedback');
        newCase.Subject =
            newCase.Initial_Reason_For_Contact__c +
            '/ ' +
            newCase.Topic__c +
            ' / ' +
            (newCase.Tone_of_Contact__c != null ? newCase.Tone_of_Contact__c : newCase.Customer_Struggle__c);
        newCase.OwnerId = queuesByName.get('Feedback_Queue');

        if (toneFromForm == NEUTRAL_TONE) {
            newCase.TemplateId__c = 'Neutral_1';
        }
        if (toneFromForm == PRAISE_TONE) {
            newCase.TemplateId__c = 'Praise_1';
        }
        if (toneFromForm == COMPLAINT_TONE) {
            newCase.TemplateId__c = 'Complaint_1';
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createAddSomethingCase(
        cu_Utils.PnrDetails pnrItem,
        String requestSubject,
        GuestDetails guestDetails
    ) {
        // requestSubject = 'seats', 'meals', 'smth else'
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        String requestSubjectName;
        newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Don\'t Want To Do This Online');
        if (requestSubject == REQUEST_SEATS) {
            requestSubjectName = 'Seats';
            newCase.Sundry__c = 'Seats';
        }
        if (requestSubject == REQUEST_MEALS) {
            requestSubjectName = 'Meals';
            newCase.Sundry__c = 'Meal';
        }
        if (requestSubject == REQUEST_ELSE) {
            requestSubjectName = 'Something else';
        }
        if (pnrItem.bookingType == S3PassengerAPIService.TRAIN_ONLY) {
            newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
                .get('New_Standard_Case')
                .getRecordTypeId();
        } else {
            newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
                .get('Dynamic_Packages')
                .getRecordTypeId();
        }
        if (pnrItem.bookingType == S3PassengerAPIService.HOTEL_ONLY) {
            newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Standalone hotel add on request');
            newCase.Subject = 'Standalone hotel add on request/ ' + requestSubjectName;
            newCase.Hotel_Booking_Reference__c = accountFromPNR.hotelBooking;
        } else if (pnrItem.bookingType == S3PassengerAPIService.TRAIN_AND_HOTEL) {
            newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Package add on request');
            newCase.Subject = 'Package add on request/ ' + requestSubjectName;
        } else {
            newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Buy or Book');
            newCase.Topic__c = caseTopicValues.get('Webform case - please review');
            newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('Reassurance Or Confirmation Needed');
            newCase.Category__c = 'Pre Travel';
            newCase.Booking_type__c = DLT_CaseConstants.BOOKING_TYPE_GENERAL_QUERY;
            newCase.Subject =
                newCase.Initial_Reason_For_Contact__c +
                '/ ' +
                CASE_SUBJECT_PLACEHOLDER +
                ' / ' +
                newCase.Customer_Struggle__c;
        }
        newCase.OwnerId = queuesByName.get('Make_a_booking_Queue');

        if (pnrItem.bookingType == S3PassengerAPIService.TRAIN_ONLY) {
            if (requestSubject == REQUEST_SEATS) {
                newCase.TemplateId__c = 'Add_seats_1';
                newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
            }
            if (requestSubject == REQUEST_MEALS) {
                newCase.TemplateId__c = 'Add_meals_1';
                newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
            }
            if (requestSubject == REQUEST_ELSE) {
                newCase.TemplateId__c = 'Generic_Response_1';
                newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
            }
        } else {
            newCase.TemplateId__c = 'Generic_Response_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createReportAProblemFeedbackCase(
        cu_Utils.PnrDetails pnrItem,
        GuestDetails guestDetails,
        String issue
    ) {
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('New_Standard_Case')
            .getRecordTypeId();
        newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Feedback');
        if (issue == PROBLEMS_OVER_THE_PHONE) {
            newCase.Topic__c = caseTopicValues.get('Staff');
        } else if (issue == PROBLEMS_ON_YOUR_JOURNEY) {
            newCase.Topic__c = caseTopicValues.get('Onboard experience');
        } else {
            newCase.Topic__c = caseTopicValues.get('General feedback');
        }
        newCase.Category__c = 'Post Travel';
        newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('Feedback submitted');
        newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Customer giving feedback');
        newCase.OwnerId = queuesByName.get('Feedback_Queue');
        newCase.TemplateId__c = 'Generic_Feedback_1';
        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createReportAnErrorCase(
        cu_Utils.PnrDetails pnrItem,
        String issue,
        String errorMessage,
        Boolean isOnOurApp,
        GuestDetails guestDetails
    ) {
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.Subject = 'Report a Problem';
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('New_Standard_Case')
            .getRecordTypeId();
        if (issue == PROBLEMS_MAKING_A_BOOKING) {
            newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Buy or Book');
            newCase.Technical_Issue__c = 'Web Error During Booking Path (IN Needed)';
            newCase.Booking_type__c = DLT_CaseConstants.BOOKING_TYPE_GENERAL_QUERY;
        } else if (issue == PROBLEMS_MAKING_PAYMENT) {
            newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Buy or Book');
            newCase.Technical_Issue__c = 'Web Error At Payment Stage (IN Needed)';
            newCase.Booking_type__c = DLT_CaseConstants.BOOKING_TYPE_GENERAL_QUERY;
        } else if (issue == PROBLEMS_EXCHANGING_BOOKING) {
            newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Change');
            newCase.Technical_Issue__c = 'Web Error During Exchange Path (IN Needed)';
            newCase.Booking_type__c = DLT_CaseConstants.BOOKING_TYPE_GENERAL_QUERY;
        } else if (issue == PROBLEMS_CANCELLING_A_BOOKING) {
            newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Cancel or Refund');
            newCase.Technical_Issue__c = 'Web Error During Refund (IN Needed)';
            newCase.Booking_type__c = DLT_CaseConstants.BOOKING_TYPE_GENERAL_QUERY;
        } else if (issue == PROBLEMS_ACCESSING_BOOKING) {
            newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Info or Advice or Confirmation');
            newCase.Sundry__c = 'Ticket Collection';
            newCase.Topic__c = caseTopicValues.get('Ticket Collection');
            newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('How Do I Get It?');
            newCase.Technical_Issue__c = 'MYB Ticket Collection';
            newCase.Category__c = 'Pre Travel';
        } else {
            newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Info or Advice or Confirmation');
            newCase.Topic__c = caseTopicValues.get('Website');
            newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('How do I use it?');
            newCase.Category__c = 'Pre Travel';
        }
        newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Need More Information');
        if (String.isNotBlank(errorMessage)) {
            newCase.Error_Message_Incident_Number__c = errorMessage;
        } else if (String.isNotBlank(guestDetails.message)) {
            newCase.Error_Message_Incident_Number__c = guestDetails.message;
        } else {
            newCase.Error_Message_Incident_Number__c = 'Something went wrong.';
        }
        newCase.OwnerId = queuesByName.get('Reported_error_queue');

        if (isOnOurApp) {
            newCase.Using_The_App__c = isOnOurApp;
        }

        if (issue == PROBLEMS_MAKING_A_BOOKING) {
            newCase.TemplateId__c = 'Common_booking_errors_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        } else if (issue == PROBLEMS_MAKING_PAYMENT) {
            newCase.TemplateId__c = 'Common_payment_errors_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        } else if (issue == PROBLEMS_EXCHANGING_BOOKING) {
            newCase.TemplateId__c = 'Common_change_errors_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        } else if (issue == PROBLEMS_CANCELLING_A_BOOKING) {
            newCase.TemplateId__c = 'Common_refund_errors_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        } else if (issue == PROBLEMS_ACCESSING_BOOKING) {
            newCase.TemplateId__c = 'Common_MYB_errors_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        } else {
            newCase.TemplateId__c = 'App_and_dotcom_generic_errors_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createSpecialAssistanceCase(
        cu_Utils.PnrDetails pnrItem,
        String specialAssistance,
        GuestDetails guestDetails
    ) {
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('New_Standard_Case')
            .getRecordTypeId();
        newCase.Category__c = 'Pre Travel';
        newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('What Do You Offer?');
        newCase.Topic__c = caseTopicValues.get('Webform case - please review');
        newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Info or Advice or Confirmation');
        if (specialAssistance == SPECIAL_ASSISTANCE_URGENT) {
            newCase.Topic__c = caseTopicValues.get('Urgent special assistance');
            newCase.Sundry__c = 'Urgent assistance';
        } else if (specialAssistance == SPECIAL_ASSISTANCE) {
            newCase.Topic__c = 'Special Assistance';
            newCase.Sundry__c = 'Non Urgent assistance';
        } else if (specialAssistance == SPECIAL_ASSISTANCE_WHEELCHAIR) {
            newCase.Topic__c = caseTopicValues.get('Wheelchair or mobility scooter');
        } else if (specialAssistance == SPECIAL_ASSISTANCE_DOGS) {
            newCase.Topic__c = caseTopicValues.get('Assistance dog');
        } else if (specialAssistance == SPECIAL_ASSISTANCE_KIDS) {
            newCase.Topic__c = caseTopicValues.get('Children & Infants');
        } else if (specialAssistance == SPECIAL_ASSISTANCE_UNACCOMPANIED_MINORS) {
            newCase.Topic__c = caseTopicValues.get('Unaccompanied Minors');
            newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('What Do I Need?');
        }
        newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Need More Information');
        if (specialAssistance == SPECIAL_ASSISTANCE_URGENT) {
            newCase.OwnerId = queuesByName.get('Assistance_Request_High_Priority');
        } else {
            newCase.OwnerId = queuesByName.get('Assistance_Request_Low_Priority');
        }

        if (specialAssistance == SPECIAL_ASSISTANCE_URGENT) {
            newCase.TemplateId__c = 'Urgent_assistance_1';
        }
        if (specialAssistance == SPECIAL_ASSISTANCE) {
            newCase.TemplateId__c = 'Non_urgent_assistance_1';
        }
        if (specialAssistance == SPECIAL_ASSISTANCE_WHEELCHAIR) {
            newCase.TemplateId__c = 'Wheelchair_1';
        }
        if (specialAssistance == SPECIAL_ASSISTANCE_DOGS) {
            newCase.TemplateId__c = 'Assistance_Dogs_1';
        }
        if (specialAssistance == SPECIAL_ASSISTANCE_KIDS) {
            newCase.TemplateId__c = 'Children_travel_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }
        if (specialAssistance == SPECIAL_ASSISTANCE_UNACCOMPANIED_MINORS) {
            newCase.TemplateId__c = 'Unaccompanied_minors_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createClubEurostarCase(
        cu_Utils.PnrDetails pnrItem,
        String helpReason,
        GuestDetails guestDetails
    ) {
        System.debug('helpReason ' + helpReason);
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        String loyaltyType = accountFromPNR.loyaltyTier;
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('New_Standard_Case')
            .getRecordTypeId();
        newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Info or Advice or Confirmation');
        newCase.Category__c = 'Club Eurostar';
        newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Need More Information');
        newCase.OwnerId = queuesByName.get(QUEUE_CLUB_EUROSTAR);

        if (helpReason == EUROSTAR_CLUB_ACCOUNT_QUERY) {
            newCase.Loyalty_Category__c = 'Account queries';
            newCase.Loyalty_Topic__c = 'Account queries';
        }
        if (helpReason == EUROSTAR_CLUB_JOURNEY_OR_MISSING_POINTS) {
            newCase.Loyalty_Category__c = 'Account maintenance';
            newCase.Loyalty_Topic__c = 'Request to add points/ticket to account';
        }
        if (helpReason == EUROSTAR_CLUB_CHANGES_PERSONAL_INFO) {
            newCase.Loyalty_Category__c = 'Account maintenance';
            newCase.Loyalty_Topic__c = 'Request to change personal details';
        }
        if (helpReason == EUROSTAR_CLUB_TROUBLE_ACCESSING_ACC) {
            newCase.Loyalty_Category__c = 'Account maintenance';
            newCase.Loyalty_Topic__c = 'Problems accessing loyalty account';
        }
        if (helpReason == EUROSTAR_CLUB_LOUNGE_ROOM_BOOKING) {
            newCase.Loyalty_Category__c = CASE_LOYALTY_CATEGORY_INFORMATION;
            newCase.Loyalty_Topic__c = CASE_LOYALTY_TOPIC_BOOKING;
            newCase.Initial_Reason_For_Contact__c = CASE_CONTACTREASON_ROOMBOOKING;
            newCase.Priority = CASE_PRIORITY_HIGH;
            newCase.Booking_type__c = CASE_CONTACTREASON_ROOMBOOKINGS;
            newCase.Customer_Struggle__c = CASE_CONTACTREASON_ROOMBOOKING;
            newCase.Reason_Tier_1__c = CASE_REASON_BOOKING;
            newCase.Reason_Tier_2__c = CASE_REASON_MAKEBOOKING;
            newCase.Reason_Tier_3__c = CASE_CONTACTREASON_ROOMBOOKING;
            newCase.Subject = CASE_BOOKING_SUBJECT;
            newCase.OwnerId = queuesByName.get(QUEUE_CUSTOMER_ROOM_BOOKING);
        }
        if (helpReason == EUROSTAR_CLUB_QUESTION) {
            newCase.Loyalty_Category__c = CASE_CATEGORY_SUBSCRIPTIONS;
            newCase.Loyalty_Topic__c = CASE_LOYALTY_SUBSCRIPTION_QUESTION;
            newCase.TemplateId__c = 'Subscriptions_1';
            newCase.Status = CASE_STATUS_NEW;
            newCase.OwnerId = queuesByName.get('Subscription');
        }
        if (helpReason == EUROSTAR_CLUB_RENEWAL_OF_PURCHASE) {
            newCase.Loyalty_Category__c = CASE_CATEGORY_SUBSCRIPTIONS;
            newCase.Loyalty_Topic__c = EUROSTAR_CLUB_RENEWAL_OR_PURCHASE;
            newCase.TemplateId__c = 'Subscriptions_2';
            newCase.Status = CASE_STATUS_NEW;
            newCase.OwnerId = queuesByName.get('Subscription');
        }
        if (String.isNotBlank(guestDetails.membershipNumber)) {
            //newCase.Membership_Number_Webform__c = guestDetails.membershipNumber;
            if (String.isNotBlank(newCase.Description)) {
                newCase.Description =
                    newCase.Description +
                    '; \n' +
                    DESCRIPTION_MEMBERSHIP_NUMBER +
                    guestDetails.membershipNumber;
            } else {
                newCase.Description = DESCRIPTION_MEMBERSHIP_NUMBER + guestDetails.membershipNumber;
            }
        }
        if (String.isNotBlank(guestDetails.birthDate)) {
            //newCase.Birth_Date__c = guestDetails.birthDate;
            if (String.isNotBlank(newCase.Description)) {
                newCase.Description = newCase.Description + '; \n' + DESCRIPTION_BIRTH_DATE + guestDetails.birthDate;
            } else {
                newCase.Description = DESCRIPTION_BIRTH_DATE + guestDetails.birthDate;
            }
        }

        if (String.isNotBlank(loyaltyType)) {
            if (
                loyaltyType.containsIgnoreCase('Elite') ||
                loyaltyType.containsIgnoreCase('Élite') ||
                loyaltyType.containsIgnoreCase('VIP')
            ) {
                newCase.OwnerId = queuesByName.get('Elite_queue');
            }
        }

        if (helpReason == EUROSTAR_CLUB_ACCOUNT_QUERY) {
            newCase.TemplateId__c = 'Account_query_1';
        }
        if (helpReason == EUROSTAR_CLUB_JOURNEY_OR_MISSING_POINTS) {
            newCase.TemplateId__c = 'Adding_points_1';
        }
        if (helpReason == EUROSTAR_CLUB_CHANGES_PERSONAL_INFO) {
            newCase.TemplateId__c = 'Changes_to_personal_info_1';
        }
        if (helpReason == EUROSTAR_CLUB_TROUBLE_ACCESSING_ACC) {
            newCase.TemplateId__c = 'Account_access_1';
        }
        if (helpReason == EUROSTAR_CLUB_JOINING) {
            newCase.TemplateId__c = 'Loyalty_overview_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createMakeBookingCase(
        cu_Utils.PnrDetails pnrItem,
        String destination,
        String origin,
        String direction,
        GuestDetails guestDetails
    ) {
        if (String.isBlank(destination))
            destination = direction;
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('New_Standard_Case')
            .getRecordTypeId();
        newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Buy or Book');
        newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Don\'t Want To Do This Online');
        newCase.Journey_Type_Product__c = '';
        String subjectMiddlePart = '';
        if (String.isNotEmpty(destination)) {
            subjectMiddlePart = destination;
        } else {
            if (String.isBlank(guestDetails.selectedCountry)) {
                newCase.Booking_type__c = DLT_CaseConstants.BOOKING_TYPE_GENERAL_QUERY;
                subjectMiddlePart = newCase.Booking_type__c;
            } else {
                newCase.StationLocation__c = guestDetails.selectedCountry;
                subjectMiddlePart = newCase.StationLocation__c;
            }
        }
        newCase.Subject =
            newCase.Initial_Reason_For_Contact__c +
            '/ ' +
            subjectMiddlePart +
            ' / ' +
            newCase.Customer_Struggle__c;
        newCase.OwnerId = queuesByName.get('Make_a_booking_Queue');
        newCase.TemplateId__c = 'Making_a_Boooking_1';
        newCase.Status = DLT_CaseConstants.STATUS_CLOSED;

        if (String.isNotEmpty(destination)) {
            if (destination.containsIgnoreCase('Kent')) {
                newCase.TemplateId__c = 'Kent_Stations_1';
                newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
            } else if (
                destination.containsIgnoreCase('Lyon') ||
                destination.containsIgnoreCase('South of France') ||
                destination.containsIgnoreCase('Ski')
            ) {
                newCase.TemplateId__c = 'Not_running_1';
                newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
            } else if (destination.containsIgnoreCase('else')) {
                newCase.TemplateId__c = 'Destinations_1';
                newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
            }
        } else if (
            (newCase.Departure_Date__c != null && Date.today().daysBetween(newCase.Departure_Date__c) > 330) ||
            (newCase.Date_selected_Web__c != null &&
            Date.today().daysBetween(newCase.Date_selected_Web__c) > 330)
        ) {
            newCase.TemplateId__c = 'Booking_Horizon_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }

        if (String.isNotEmpty(origin) && String.isNotEmpty(direction)) {
            newCase.DLT_Origin__c = origin;
            newCase.DLT_Destination__c = direction;
        }

        newCases.add(newCase);
        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createTravelQuestionCase(
        cu_Utils.PnrDetails pnrItem,
        String question,
        GuestDetails guestDetails
    ) {
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('New_Standard_Case')
            .getRecordTypeId();
        newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Info or Advice or Confirmation');
        newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Need More Information');
        newCase.Category__c = 'Pre Travel';
        newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('Reassurance Or Confirmation Needed');
        newCase.OwnerId = queuesByName.get('General_Information_queue');

        if (question == QUESTION_TIMETABLE) {
            newCase.Topic__c = 'Timetable';
            newCase.TemplateId__c = 'Timetable_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }
        if (question == QUESTION_DESTINATIONS) {
            newCase.Topic__c = 'Destination Info';
            newCase.TemplateId__c = 'Destinations_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }
        if (question == QUESTION_LIVE_DEPARTURES_ARRIVALS) {
            newCase.Topic__c = 'Real Time Train Information';
            newCase.TemplateId__c = 'Live_trains_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }
        if (question == QUESTION_CONNECTING_TRAVEL) {
            newCase.Topic__c = 'Connections';
            newCase.TemplateId__c = 'Connecting_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }
        if (question == QUESTION_BREXIT) {
            newCase.Topic__c = 'Brexit';
            newCase.TemplateId__c = 'Brexit_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }
        if (question == QUESTION_GETTING_TICKETS) {
            newCase.Topic__c = 'Ticket Collection';
            newCase.TemplateId__c = 'Ticket_collection_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createTicketConditionQuestionCase(
        cu_Utils.PnrDetails pnrItem,
        String ticketConditions,
        GuestDetails guestDetails
    ) {
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('New_Standard_Case')
            .getRecordTypeId();
        newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Info or Advice or Confirmation');
        newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Need More Information');
        newCase.Category__c = 'Pre Travel';
        newCase.Topic__c = caseTopicValues.get('Ticket Conditions');
        if (ticketConditions == QUESTION_TS_AND_CS) {
            newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('What Do You Offer?');
        } else {
            newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('What Is Allowed or Not Allowed?');
        }
        newCase.OwnerId = queuesByName.get('General_Information_queue');

        if (ticketConditions == QUESTION_TS_AND_CS) {
            newCase.TemplateId__c = 'Ticket_Conditions_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }
        if (ticketConditions == QUESTION_EXCHANGES) {
            newCase.TemplateId__c = 'How_to_change_online_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }
        if (ticketConditions == QUESTION_CANCELLATIONS_REFUNDS) {
            newCase.TemplateId__c = 'How_to_cancel_online_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }
        if (ticketConditions == QUESTION_TRANSFER) {
            newCase.TemplateId__c = 'Transferring_Tickets_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createStationsQuestionCase(
        cu_Utils.PnrDetails pnrItem,
        String station,
        GuestDetails guestDetails,
        String topic,
        String whatIsTheQuestion
    ) {
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('New_Standard_Case')
            .getRecordTypeId();
        newCase.Initial_Reason_For_Contact__c = CASE_CONTACTREASON_INFOADVICE;
        newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Need More Information');
        newCase.Category__c = 'Pre Travel';
        newCase.Topic__c = topic;
        newCase.What_Is_The_Question__c = whatIsTheQuestion;
        newCase.OwnerId = queuesByName.get('General_Information_queue');
        newCase.Status = DLT_CaseConstants.STATUS_CLOSED;

        cu_Utils.setTemplateId(newCase, whatIsTheQuestion);

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createOnboardQuestionCase(
        cu_Utils.PnrDetails pnrItem,
        String question,
        GuestDetails guestDetails
    ) {
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('New_Standard_Case')
            .getRecordTypeId();
        newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Info or Advice or Confirmation');
        newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Need More Information');
        newCase.Category__c = 'Onboard';
        newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('What Do You Offer?');
        if (question == QUESTION_ELSE) {
            newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('Webform case - please review');
        }
        newCase.Topic__c = caseTopicValues.get('Webform case - please review');
        newCase.Booking_type__c = DLT_CaseConstants.BOOKING_TYPE_GENERAL_QUERY;
        newCase.OwnerId = queuesByName.get('General_Information_queue');

        if (question == QUESTION_SEATING) {
            newCase.TemplateId__c = 'Onboard_seating_1';
        } else if (question == QUESTION_CATERING) {
            newCase.TemplateId__c = 'Catering_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        } else if (question == QUESTION_TRAVEL_CLASSES) {
            newCase.TemplateId__c = 'Travel_class_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        } else if (question == QUESTION_WIFI) {
            newCase.TemplateId__c = 'Onboard_wifi_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        } else if (question == QUESTION_ELSE) {
            newCase.TemplateId__c = 'Onboard_generic_1';
        } else {
            newCase.TemplateId__c = 'Onboard_generic_1';
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createLugageQuestionCase(
        cu_Utils.PnrDetails pnrItem,
        String luggageType,
        GuestDetails guestDetails
    ) {
        List<Case> newCases = new List<Case>();
        Case newCase = createLuggageQuestionAnyColor(pnrItem, luggageType, guestDetails);

        if (luggageType == QUESTION_PROHIBITTED_LUGGAGE) {
            newCase.What_Is_The_Question__c = caseWhatQuestionValues.get(CASE_QUESTION_ALLOWED);
        } else {
            newCase.What_Is_The_Question__c = caseWhatQuestionValues.get(CASE_QUESTION_OFFER);
        }
        newCase.Topic__c = caseTopicValues.get(CASE_TOPIC_LUGGAGE);
        newCase.Journey_Type_Product__c = CASE_JOURNEY_PRODUCT_LONDON;
        newCase.Carrier__c = CASE_CARRIER_BLUE;

        if (luggageType == QUESTION_PROHIBITTED_LUGGAGE) {
            newCase.TemplateId__c = 'Prohibited_Items_1';
        } else if (luggageType == QUESTION_LUGGAGE_ALLOWANCE) {
            newCase.TemplateId__c = 'Luggage_allowance_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        } else if (luggageType == QUESTION_LUGGAGE_INFO) {
            newCase.TemplateId__c = 'General_Luggage_info_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        } else {
            newCase.TemplateId__c = 'General_Luggage_info_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createRedLugageQuestionCase(
        cu_Utils.PnrDetails pnrItem,
        String luggageType,
        GuestDetails guestDetails
    ) {
        List<Case> newCases = new List<Case>();
        Case newCase = createLuggageQuestionAnyColor(pnrItem, luggageType, guestDetails);

        newCase.Journey_Type_Product__c = CASE_JOURNEY_PRODUCT_CONTINENT;
        newCase.Carrier__c = CASE_CARRIER_RED;

        if (luggageType == System.Label.cu_Luggage_Information) {
            newCase.Topic__c = CASE_TOPIC_LUGGAGE;
            newCase.What_Is_The_Question__c = CASE_QUESTION_OFFER;
            newCase.TemplateId__c = 'Luggage_info_RED_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        } else if (luggageType == System.Label.cu_TravelingWithBikes) {
            newCase.Topic__c = CASE_TOPIC_BIKE;
            newCase.What_Is_The_Question__c = CASE_QUESTION_OFFER;
            newCase.TemplateId__c = 'Travelling_with_BIKES_RED_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        } else if (luggageType == System.Label.cu_LostProperty) {
            newCase.Topic__c = CASE_TOPIC_LUGGAGE;
            newCase.What_Is_The_Question__c = CASE_QUESTION_LOST_SOMETHING;
            newCase.TemplateId__c = 'Lost_property_RED_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
                throw new AuraHandledException(e.getMessage());
            }
        }

        return newCase;
    }

    public static Case createLuggageQuestionAnyColor(
        cu_Utils.PnrDetails pnrItem,
        String luggageType,
        GuestDetails guestDetails
    ) {
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('New_Standard_Case')
            .getRecordTypeId();
        newCase.Initial_Reason_For_Contact__c = CASE_CONTACTREASON_INFOADVICE;
        newCase.Customer_Struggle__c = CASE_STRUGGLE_MOREINFO;
        newCase.Category__c = CASE_CATEGORY_PRETRAVEL;
        newCase.OwnerId = queuesByName.get(QUEUE_GENERAL_INFO);
        return newCase;
    }

    @AuraEnabled
    public static Case createDisruptionQuestionCase(
        cu_Utils.PnrDetails pnrItem,
        String question,
        String station,
        GuestDetails guestDetails
    ) {
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('New_Standard_Case')
            .getRecordTypeId();
        newCase.Initial_Reason_For_Contact__c = CASE_CONTACTREASON_INFOADVICE;
        newCase.Customer_Struggle__c = caseCustomerStruggleValues.get(CASE_STRUGGLE_WEBFORMCASE);
        newCase.Disruption_Email__c = guestDetails.email;
        newCase.Origin = 'Web';

        if (question == QUESTION_EXPENSES) {
            newCase.Alternative_Disruption__c = 'Expenses';
            newCase.Disruption_Query__c = 'What am I entitled to?';
            newCase.TemplateId__c = 'Expenses_1';
        }
        if (question == QUESTION_DELAY_COMPENSATION) {
            newCase.Travel_Based_Disruption__c = 'Delay';
            newCase.TemplateId__c = 'Delay_comp_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }
        if (question == QUESTION_CANCELLATION_COMPENSATION) {
            newCase.Travel_Based_Disruption__c = 'Cancellation';
            newCase.TemplateId__c = 'Cancellation_Comp_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }
        if (question == QUESTION_CURRENT_DISRUPTION) {
            newCase.Travel_Based_Disruption__c = 'Real Time Train Information';
            newCase.TemplateId__c = 'Current_disruption_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
            if (String.isNotEmpty(guestDetails.destination)) {
                cu_Utils.setTemplateId(newCase, guestDetails.destination);
            }
        }
        if (question == QUESTION_CORONAVIRUS) {
            newCase.Alternative_Disruption__c = 'Covid - Information and communication';
            newCase.Disruption_Query__c = 'What am I entitled to?';
            newCase.TemplateId__c = 'Covid_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }
        if (question == QUESTION_FUTURE_DISRUPTION_INFO) {
            newCase.Travel_Based_Disruption__c = 'Schedule Changes';
            newCase.TemplateId__c = 'Future_disruption_dynamic';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
            newCase.Initial_Reason_For_Contact__c = CASE_INITIALREASON_DISRUPTION;
            newCase.Customer_Struggle__c = CASE_STRUGGLE_DONTWANTONLINE;
            if (String.isNotEmpty(guestDetails.destination)) {
                cu_Utils.setDisruptionTemplateId(newCase, guestDetails.destination);
            }
        }

        if (String.isNotEmpty(guestDetails.destination)) {
            newCase.DLT_Destination__c = guestDetails.destination;
            newCase.StationLocation__c = guestDetails.selectedCountry;
            newCase.Topic__c = CASE_TOPIC_STATIONINFORMATION;
            newCase.What_Is_The_Question__c = guestDetails.destination;
            newCase.Date_selected_Web__c = String.isBlank(guestDetails.dateOfTravel)
                ? null
                : Date.valueOf(guestDetails.dateOfTravel);
        }

        newCase.OwnerId = queuesByName.get('ECC_Disruptions');
        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createWebsiteQuestionCase(
        cu_Utils.PnrDetails pnrItem,
        String question,
        String errorMessage,
        GuestDetails guestDetails
    ) {
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('New_Standard_Case')
            .getRecordTypeId();
        newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Info or Advice or Confirmation');
        newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Need More Information');
        newCase.Category__c = 'Pre Travel';
        newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('Reassurance Or Confirmation Needed');
        if ((question == QUESTION_HELP_FINDING) || (question == QUESTION_REPORT_PROBLEM)) {
            newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('How do I use it?');
        }
        if (question == QUESTION_RESET_PASSWORD) {
            newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('I need to reset my password');
        }
        if (String.isNotBlank(errorMessage)) {
            newCase.Error_Message_Incident_Number__c = errorMessage;
        } else if (String.isNotBlank(guestDetails.message)) {
            newCase.Error_Message_Incident_Number__c = guestDetails.message;
        }
        if ((question == QUESTION_HELP_DOING) || (question == QUESTION_HELP_FINDING)) {
            newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Couldn\'t Find');
        }
        newCase.Topic__c = caseTopicValues.get('Website');
        newCase.OwnerId = queuesByName.get('General_Information_queue');

        if (question == QUESTION_HELP_FINDING) {
            newCase.TemplateId__c = 'Website_navigation_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }
        if (question == QUESTION_HELP_DOING) {
            newCase.TemplateId__c = 'Website_usage_1';
            newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        }
        if (question == QUESTION_ONLINE_HELP) {
            newCase.TemplateId__c = 'Online_account_1';
        }
        if (question == QUESTION_REPORT_PROBLEM) {
            newCase.TemplateId__c = 'Report_a_problem_1';
        }
        if (question == QUESTION_RESET_PASSWORD) {
            newCase.TemplateId__c = 'Reset_password_1';
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createDocsQuestionCase(cu_Utils.PnrDetails pnrItem, String question, GuestDetails guestDetails) {
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('New_Standard_Case')
            .getRecordTypeId();
        newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Info or Advice or Confirmation');
        newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Need More Information');
        newCase.Category__c = 'Pre Travel';
        newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('Reassurance Or Confirmation Needed');
        if (question == QUESTION_NAMES_AND_OTHER_DETAILS) {
            newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('What Do I Need?');
        }
        if (question == QUESTION_RESET_PASSWORD) {
            newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('What Is Allowed or Not Allowed?');
        }
        newCase.Topic__c = caseTopicValues.get('Documents Or Paperwork');
        newCase.OwnerId = queuesByName.get('General_Information_queue');
        newCase.Status = DLT_CaseConstants.STATUS_CLOSED;

        if (question == QUESTION_NAMES_AND_OTHER_DETAILS) {
            newCase.TemplateId__c = 'Personal_details_documents_1';
        } else if (question == QUESTION_WHAT_DO_I_NEED_TO_TRAVEL) {
            newCase.TemplateId__c = 'Travel_docs_1';
        } else if (question == QUESTION_ELSE) {
            newCase.TemplateId__c = 'Generic_travel_docs_1';
        } else {
            newCase.TemplateId__c = 'Generic_travel_docs_1';
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createVoucherQuestionCase(
        cu_Utils.PnrDetails pnrItem,
        String question,
        GuestDetails guestDetails
    ) {
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('New_Standard_Case')
            .getRecordTypeId();
        newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Info or Advice or Confirmation');
        newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Need More Information');
        newCase.Category__c = 'Pre Travel';
        if (question == QUESTION_GIFT_VOUCHERS) {
            newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('How Do I Get It?');
        } else if (question == QUESTION_HOW_TO_USE_VOUCHER) {
            newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('How do I use it?');
        } else if (question == QUESTION_PROBLEMS_WITH_VOUCHER) {
            newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('What Do I Need?');
            newCase.Technical_Issue__c = 'Evoucher not accepted';
        } else if (question == QUESTION_LOST_VOUCHER) {
            newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('I\'ve lost something');
            newCase.Technical_Issue__c = 'Voucher Not Received';
        } else if (question == QUESTION_ELSE) {
            newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('Reassurance Or Confirmation Needed');
        } else {
            newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('Reassurance Or Confirmation Needed');
        }
        newCase.Topic__c = caseTopicValues.get('Vouchers');
        newCase.Sundry__c = 'Voucher';
        newCase.OwnerId = queuesByName.get('General_Information_queue');
        newCase.Status = DLT_CaseConstants.STATUS_CLOSED;

        if (question == QUESTION_GIFT_VOUCHERS) {
            newCase.TemplateId__c = 'Buy_Vouchers_1';
        } else if (question == QUESTION_HOW_TO_USE_VOUCHER) {
            newCase.TemplateId__c = 'Using_Vouchers_1';
        } else if (question == QUESTION_PROBLEMS_WITH_VOUCHER) {
            newCase.TemplateId__c = 'Voucher_Problems_1';
        } else if (question == QUESTION_LOST_VOUCHER) {
            newCase.TemplateId__c = 'Voucher_resend_1';
        } else if (question == QUESTION_ELSE) {
            newCase.TemplateId__c = 'Generic_voucher_1';
        } else {
            newCase.TemplateId__c = 'Generic_voucher_1';
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createElseQuestionCase(cu_Utils.PnrDetails pnrItem, GuestDetails guestDetails) {
        getQueries();
        Account customer = getCustomer(guestDetails);
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        List<Case> newCases = new List<Case>();
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('New_Standard_Case')
            .getRecordTypeId();
        newCase.What_Is_The_Question__c = caseWhatQuestionValues.get('What Do You Offer?');
        newCase.Initial_Reason_For_Contact__c = caseReasonForContactValues.get('Info or Advice or Confirmation');
        newCase.Category__c = 'Pre Travel';
        newCase.Topic__c = caseTopicValues.get('Webform case - please review');
        newCase.Customer_Struggle__c = caseCustomerStruggleValues.get('Need More Information');
        newCase.Booking_type__c = pnrItem.isLastMinuteTicket
            ? DLT_CaseConstants.BOOKING_TYPE_LAST_MINUTE
            : DLT_CaseConstants.BOOKING_TYPE_GENERAL_QUERY;
        newCase.OwnerId = queuesByName.get('General_Information_queue');
        newCase.TemplateId__c = pnrItem.isLastMinuteTicket
            ? DLT_CaseConstants.EMAIL_TEMPLATE_DEVNAME_LASTMINUTE_FAQS
            : DLT_CaseConstants.EMAIL_TEMPLATE_DEVNAME_GENERIC_HELP_AND_FAQS_1;
        newCase.Status = DLT_CaseConstants.STATUS_CLOSED;
        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createB2BBookingCase(GuestDetails guestDetails, String argJSON, Boolean isSpreadsheet) {
        getQueries();

        Account customer = getCustomer(guestDetails);
        List<Case> newCases = new List<Case>();

        Case newCase = createBasicCase(null, guestDetails, null, customer);

        newCase.AccountId = customer.Id;
        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('B2B_group_booking')
            .getRecordTypeId();

        newCase.Initial_Reason_For_Contact__c = CASE_CONTACTREASON_BUYORBOOK;
        newCase.Category__c = CASE_CATEGORY_PRETRAVEL;
        newCase.Topic__c = CASE_TOPIC_WEBFORMCASE;
        newCase.What_Is_The_Question__c = CASE_TOPIC_WEBFORMCASE;
        newCase.Customer_Struggle__c = CASE_TOPIC_WEBFORMCASE;
        newCase.Journey_Type_Product__c = CASE_TOPIC_WEBFORMCASE;
        newCase.Subject = CASE_SUBJECT_B2B_GROUPS;

        if (!isSpreadsheet) {
            Map<String, Object> arg = (Map<String, Object>) JSON.deserializeUntyped(argJSON);

            newCase.First_Name__c = guestDetails.firstName;
            newCase.Last_Name__c = guestDetails.lastName;
            newCase.SuppliedEmail = guestDetails.email;
            newCase.Additional_Notes__c = guestDetails.message;

            newCase.DLT_Origin__c = String.valueOf(arg.get('origin'));
            newCase.DLT_Destination__c = String.valueOf(arg.get('destination'));
            newCase.Origin_Lookup__c = findStationByName(String.valueOf(arg.get('origin')))?.Id;
            newCase.Destination_Lookup__c = findStationByName(String.valueOf(arg.get('destination')))?.Id;

            newCase.Departure_Date__c = String.isBlank(String.valueOf(arg.get('dateOfTravel')))
                ? null
                : Date.valueOf(String.valueOf(arg.get('dateOfTravel')));
            newCase.Departure_Time__c = String.valueOf(arg.get('timeOfTravel'));
            newCase.Return_Or_Single__c = CASE_RETURNORSINGLE_SINGLE;

            if (!String.isBlank(String.valueOf(arg.get('dateOfReturn')))) {
                newCase.Return_Date__c = Date.valueOf(String.valueOf(arg.get('dateOfReturn')));
                newCase.Return_Time__c = String.valueOf(arg.get('timeOfReturn'));
                newCase.Return_Or_Single__c = CASE_RETURNORSINGLE_RETURN;
            }

            newCase.Adults_Number__c = Integer.valueOf(arg.get('adultPassengers'));
            newCase.Childrens_Number__c = Integer.valueOf(arg.get('childrenPassengers'));
            newCase.Infants_Number__c = Integer.valueOf(arg.get('infantsPassengers'));
            newCase.Number_of_Pax__c =
                newCase.Adults_Number__c +
                newCase.Childrens_Number__c +
                newCase.Infants_Number__c;

            newCase.Class_Of_Service__c = String.valueOf(arg.get('classService'));
            newCase.Booker_Company_Name__c = String.valueOf(arg.get('companyName'));

            List<String> bookerInterests = new List<String>();
            if (Boolean.valueOf(arg.get('assistanceCatering')))
                bookerInterests.add(ASSISTANCE_CATERING);
            if (Boolean.valueOf(arg.get('assistanceLuggage')))
                bookerInterests.add(ASSISTANCE_LUGGAGE);
            if (Boolean.valueOf(arg.get('assistanceBranding')))
                bookerInterests.add(ASSISTANCE_BRANDING);
            if (Boolean.valueOf(arg.get('assistanceExperience')))
                bookerInterests.add(ASSISTANCE_EXPERIENCE);
            if (Boolean.valueOf(arg.get('assistanceCarriage')))
                bookerInterests.add(ASSISTANCE_EXCLUSIVECARRIAGE);
            if (Boolean.valueOf(arg.get('assistanceHalfcharter')))
                bookerInterests.add(ASSISTANCE_HALFCHARTER);
            if (Boolean.valueOf(arg.get('assistanceCharter')))
                bookerInterests.add(ASSISTANCE_CHARTER);

            newCase.Booker_Interests__c = string.join(bookerInterests, ';');
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
                throw new AuraHandledException(e.getMessage());
            }
        }

        return newCase;
    }

    @AuraEnabled
    public static Case createDocRequestCase(
        cu_Utils.PnrDetails pnrItem,
        String topic,
        String argJSON,
        GuestDetails guestDetails
    ) {
        getQueries();

        Account customer = getCustomer(guestDetails);
        List<Case> newCases = new List<Case>();
        AccountDetails accountFromPNR = getAccountFromPNR(pnrItem.pnr);
        Case newCase = createBasicCase(pnrItem, guestDetails, accountFromPNR, customer);

        Map<String, Object> arg = (Map<String, Object>) JSON.deserializeUntyped(argJSON);

        newCase.RecordTypeId = Schema.SObjectType.Case.getRecordTypeInfosByDeveloperName()
            .get('New_Standard_Case')
            .getRecordTypeId();

        newCase.Initial_Reason_For_Contact__c = CASE_CONTACTREASON_INFOADVICE;
        newCase.Customer_Struggle__c = CASE_STRUGGLE_MOREINFO;

        newCase.TemplateId__c = 'Generic_letter_request_1';
        newCase.OwnerId = queuesByName.get(QUEUE_DOC_REQUEST);

        if (!String.isBlank(String.valueOf(arg.get('tcn')))) {
            List<Ticket__c> tickets = [
                SELECT Id
                FROM Ticket__c
                WHERE Name = :String.valueOf(arg.get('tcn')) AND PNR__c = :pnrItem.pnr
                LIMIT 1
            ];

            if (tickets.size() == 0) {
                tickets = [
                    SELECT Id
                    FROM Ticket__c
                    WHERE Name = :String.valueOf(arg.get('tcn'))
                    LIMIT 1
                ];
            }

            if (tickets.size() > 0)
                newCase.TCN__c = tickets[0].Id;
        }

        switch on topic {
            when 'cu_Invoices' {
                newCase.Subject = CASE_TOPIC_INVOICES;
                newCase.Category__c = CASE_CATEGORY_SUBSCRIPTIONS;
                newCase.Topic__c = CASE_TOPIC_INVOICES;
                newCase.What_Is_The_Question__c = CASE_QUESTION_REASSURENCE;
                newCase.TemplateId__c = 'Generic_Subscription_document_request_1';
                newCase.OwnerId = queuesByName.get(QUEUE_SUBSCRIPTION);
            }
            when 'cu_CreditNotes' {
                newCase.Subject = CASE_TOPIC_CREDITNOTES;
                newCase.Category__c = CASE_CATEGORY_SUBSCRIPTIONS;
                newCase.Topic__c = CASE_TOPIC_CREDITNOTES;
                newCase.What_Is_The_Question__c = CASE_QUESTION_REASSURENCE;
                newCase.TemplateId__c = 'cu_Generic_Subscription_document_request_1';
                newCase.OwnerId = queuesByName.get(QUEUE_SUBSCRIPTION);
            }
            when 'cu_ProForma' {
                newCase.Subject = CASE_TOPIC_PROFORMA;
                newCase.Category__c = CASE_CATEGORY_SUBSCRIPTIONS;
                newCase.Topic__c = CASE_TOPIC_PROFORMA;
                newCase.What_Is_The_Question__c = CASE_QUESTION_REASSURENCE;
                newCase.TemplateId__c = 'cu_Generic_Subscription_document_request_1';
                newCase.OwnerId = queuesByName.get(QUEUE_SUBSCRIPTION);
            }
            when 'cu_History' {
                newCase.Subject = CASE_TOPIC_HISTORY;
                newCase.Category__c = CASE_CATEGORY_SUBSCRIPTIONS;
                newCase.Topic__c = CASE_TOPIC_HISTORY;
                newCase.What_Is_The_Question__c = CASE_QUESTION_REASSURENCE;
                newCase.TemplateId__c = 'cu_Generic_Subscription_document_request_1';
                newCase.OwnerId = queuesByName.get(QUEUE_SUBSCRIPTION);
            }
            when 'cu_ProofOfTravel' {
                newCase.Subject = CASE_TOPIC_TRAVELPROOF;
                newCase.Category__c = CASE_CATEGORY_DOCREQUEST;
                newCase.Topic__c = CASE_TOPIC_TRAVELPROOF;
                newCase.What_Is_The_Question__c = CASE_QUESTION_PROOF_TRAVEL;
            }
            when 'cu_ProofOfDisruption' {
                newCase.Subject = CASE_TOPIC_TRAVELPROOF;
                newCase.Category__c = CASE_CATEGORY_DOCREQUEST;
                newCase.Topic__c = CASE_TOPIC_TRAVELPROOF;
                newCase.What_Is_The_Question__c = CASE_QUESTION_PROOF_DISRUPTION;
            }
            when 'cu_ProofOfCancellation' {
                newCase.Subject = CASE_TOPIC_TRAVELPROOF;
                newCase.Category__c = CASE_CATEGORY_DOCREQUEST;
                newCase.Topic__c = CASE_TOPIC_TRAVELPROOF;
                newCase.What_Is_The_Question__c = CASE_QUESTION_PROOF_CANCEL;
            }
            when 'cu_BookingReceipt' {
                newCase.Subject = CASE_TOPIC_RECEIPTS;
                newCase.Category__c = CASE_CATEGORY_DOCREQUEST;
                newCase.Topic__c = CASE_TOPIC_RECEIPTS;
                newCase.What_Is_The_Question__c = CASE_QUESTION_REASSURENCE;
            }
            when 'cu_AdditionalCharges' {
                newCase.Subject = CASE_TOPIC_ADDITIONALCHARGES;
                newCase.Category__c = CASE_CATEGORY_DOCREQUEST;
                newCase.Topic__c = CASE_TOPIC_ADDITIONALCHARGES;
                newCase.What_Is_The_Question__c = CASE_QUESTION_REASSURENCE;
            }
            when 'cu_ConfirmationOfBooking' {
                newCase.Subject = CASE_TOPIC_BOOKINGCONFIRMATION;
                newCase.Category__c = CASE_CATEGORY_DOCREQUEST;
                newCase.Topic__c = CASE_TOPIC_BOOKINGCONFIRMATION;
                newCase.What_Is_The_Question__c = CASE_QUESTION_REASSURENCE;
            }
            when else {
                newCase.Subject = '';
                newCase.Category__c = '';
                newCase.Topic__c = '';
                newCase.What_Is_The_Question__c = '';
            }
        }

        newCases.add(newCase);

        if (!newCases.isEmpty()) {
            try {
                insert newCases;
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
                throw new AuraHandledException(e.getMessage());
            }
        }

        return newCase;
    }

    public static List<Case> getExistingCasesByEmail(String email) {
        return [
            SELECT Id, Status, Initial_Reason_For_Contact__c, Email__c, Tone_of_Contact__c, PNR__c
            FROM Case
            WHERE
                Status IN (
                    :DLT_CaseConstants.STATUS_OPEN,
                    :DLT_CaseConstants.STATUS_NEW,
                    :DLT_CaseConstants.SUB_STATUS_CASE_COMMENT_RECEIVED,
                    :DLT_CaseConstants.STATUS_REOPENED
                )
                AND Email__c = :email
                AND RecordType.DeveloperName != 'PRR_Case'
            ORDER BY CreatedDate DESC
            LIMIT 1
        ];
    }

    public static List<Case> getExistingCasesByPNR(String pnr) {
        return [
            SELECT Id, Status, Description, Error_Message_Incident_Number__c, Tone_of_Contact__c
            FROM Case
            WHERE
                Status IN (
                    :DLT_CaseConstants.STATUS_OPEN,
                    :DLT_CaseConstants.STATUS_NEW,
                    :DLT_CaseConstants.SUB_STATUS_CASE_COMMENT_RECEIVED,
                    :DLT_CaseConstants.STATUS_REOPENED
                )
                AND PNR__c = :pnr
                AND RecordType.DeveloperName != 'PRR_Case'
            ORDER BY CreatedDate DESC
            LIMIT 1
        ];
    }

    public static List<Case> getCasesById(List<Id> caseIds) {
        return [SELECT Id, CaseNumber FROM Case WHERE Id IN :caseIds];
    }

    private static AccountDetails getAccountFromPNR(String pnr) {
        AccountDetails accountFromPNR = new AccountDetails('', '', '', '', '', '', '', null, null, '', '');
        if (String.isNotEmpty(pnr)) {
            List<Ticket__c> tickets = [
                SELECT
                    Id,
                    PNR__c,
                    Booker__c,
                    Booker__r.Name,
                    Booker__r.PersonContact.FirstName,
                    Booker__r.PersonContact.Customer_Email__c,
                    Booker__r.Loyalty_Tier__pc,
                    Travel_DateTime__c,
                    Booker__r.Customer_Email__pc,
                    Destination__c,
                    Booker__r.PersonContactId
                FROM Ticket__c
                WHERE PNR__c = :pnr AND Cancelled_By_Customer__c = FALSE
                ORDER BY Travel_DateTime__c ASC
            ];
            List<Booking__c> booking = [
                SELECT
                    Id,
                    Name,
                    PNR__c,
                    Booker__c,
                    Booker__r.Name,
                    Booker__r.PersonContact.FirstName,
                    Booker__r.PersonContact.Customer_Email__c,
                    Booker__r.Loyalty_Tier__pc,
                    Booker__r.Customer_Email__pc,
                    Booker__r.PersonContactId,
                    JAC_Travel_Ref__c
                FROM Booking__c
                WHERE PNR__c = :pnr OR JAC_Travel_Ref__c = :pnr
            ];
            if (!tickets.isEmpty()) {
                accountFromPNR.id = tickets[0].Booker__c;
                accountFromPNR.accountName = tickets[0].Booker__r.Name;
                accountFromPNR.contactId = tickets[0].Booker__r.PersonContactId;
                accountFromPNR.contactName = tickets[0].Booker__r.PersonContact.FirstName;
                accountFromPNR.customerEmail = tickets[0].Booker__r.Customer_Email__pc;
                accountFromPNR.contactEmail = tickets[0].Booker__r.PersonContact.Customer_Email__c;
                accountFromPNR.loyaltyTier = tickets[0].Booker__r.Loyalty_Tier__pc;
                accountFromPNR.destination = tickets[0].Destination__c;
                if (String.isNotBlank(tickets[0].Travel_DateTime__c)) {
                    accountFromPNR.departureDate = getDateFromTravelDateTime(tickets[0].Travel_DateTime__c);
                }
                if (tickets.size() > 1) {
                    Integer lastElementIndex = tickets.size() - 1;
                    if (String.isNotBlank(tickets[lastElementIndex].Travel_DateTime__c)) {
                        accountFromPNR.returnDate = getDateFromTravelDateTime(
                            tickets[lastElementIndex].Travel_DateTime__c
                        );
                    }
                }
            } else if (!booking.isEmpty()) {
                accountFromPNR.id = booking[0].Booker__c;
                accountFromPNR.accountName = booking[0].Booker__r.Name;
                accountFromPNR.contactId = booking[0].Booker__r.PersonContactId;
                accountFromPNR.contactName = booking[0].Booker__r.PersonContact.FirstName;
                accountFromPNR.customerEmail = booking[0].Booker__r.Customer_Email__pc;
                accountFromPNR.contactEmail = booking[0].Booker__r.PersonContact.Customer_Email__c;
                accountFromPNR.loyaltyTier = booking[0].Booker__r.Loyalty_Tier__pc;
                accountFromPNR.hotelBooking = booking[0].Name;
            }
        }
        return accountFromPNR;
    }

    private static Date getDateFromTravelDateTime(String departureDateTime) {
        Date departureDateFromField;
        if (departureDateTime.contains('-')) {
            String departureDate = departureDateTime.substringBefore(' ');
            String departureDay = departureDate.substringBetween('-', '-');
            departureDate = departureDate.replace('-' + departureDay, '');
            departureDate = departureDate + '-' + departureDay;
            departureDateFromField = Date.valueOf(departureDate);
        }
        if (departureDateTime.contains('/')) {
            String departureDate = departureDateTime.substringBefore(' ');
            String departureMonth = departureDate.substringBetween('/', '/');
            departureDate = departureDate.replace('/' + departureMonth, '');
            departureDate = departureMonth + '/' + departureDate;
            String departureYear = departureDate.substringAfterLast('/');
            departureDate = departureDate.replace('/' + departureYear, '');
            departureDate = departureYear + '/' + departureDate;
            departureDate = departureDate.replace('/', '-');
            departureDateFromField = Date.valueOf(departureDate);
        }
        return departureDateFromField;
    }

    public static List<Case> getExistingCasesWithPNR(String pnr, String email) {
        List<Case> allCasesWithPNR = new List<Case>(
            [
                SELECT Id, Initial_Reason_For_Contact__c, Email__c, Tone_of_Contact__c, PNR__c
                FROM Case
                WHERE
                    Status IN ('New', 'Open', 'Case Comment Received')
                    AND PNR__c = :pnr
                    AND Email__c = :email
                    AND RecordType.DeveloperName != 'PRR_Case'
                ORDER BY CreatedDate DESC
                LIMIT 1
            ]
        );
        return allCasesWithPNR;
    }

    public static Id findTCNByPNRAndDepartureDate(String pnr, String departureDate) {
        Id tcnId;
        Map<String, Ticket__c> pnrToTcnResult = findTCNByPNRAndDepartureDate(new Set<String>{ pnr }, departureDate);
        if (pnrToTcnResult.containsKey(pnr)) {
            tcnId = pnrToTcnResult.get(pnr).Id;
        }
        return tcnId;
    }

    public static Map<String, Ticket__c> findTCNByPNRAndDepartureDate(List<Case> cases, String departureDate) {
        Set<String> pnrSet = new Set<String>();
        for (Case caseItem : cases) {
            if (caseItem.PNR__c != null) {
                pnrSet.add(caseItem.PNR__c);
            }
        }
        return findTCNByPNRAndDepartureDate(pnrSet, departureDate);
    }

    public static Map<String, Ticket__c> findTCNByPNRAndDepartureDate(Set<String> pnrs, String departureDate) {
        Map<String, Ticket__c> pnrToTcnResult = new Map<String, Ticket__c>();
        if (String.isNotEmpty(departureDate)) {
            Map<String, List<Ticket__c>> ticketsMap = populatePnrToTicketsMap(pnrs, departureDate);
            for (String pnr : pnrs) {
                if (ticketsMap.containsKey(pnr)) {
                    Ticket__c relevantTicket = findRelevantTicket(ticketsMap.get(pnr));
                    if (relevantTicket != null) {
                        pnrToTcnResult.put(pnr, relevantTicket);
                    }
                }
            }
        }
        return pnrToTcnResult;
    }

    private static Map<String, List<Ticket__c>> populatePnrToTicketsMap(Set<String> pnrs, String departureDate) {
        List<Ticket__c> tickets = [
            SELECT Id, PNR__c, Ticket_Status__c, Departure_Date_Time_Format__c
            FROM Ticket__c
            WHERE PNR__c IN :pnrs AND DAY_ONLY(Departure_Date_Time_Format__c) = :Date.valueOf(departureDate)
            ORDER BY Departure_Date_Time_Format__c DESC
        ];

        Map<String, List<Ticket__c>> result = new Map<String, List<Ticket__c>>();

        for (Ticket__c ticket : tickets) {
            if (result.containsKey(ticket.PNR__c)) {
                result.get(ticket.PNR__c).add(ticket);
            } else {
                result.put(ticket.PNR__c, new List<Ticket__c>{ ticket });
            }
        }
        return result;
    }

    private static Ticket__c findRelevantTicket(List<Ticket__c> tickets) {
        Ticket__c futureActiveTicket;
        Ticket__c futureCancelledTicket;
        Ticket__c pastActiveTicket;
        Ticket__c pastCancelledTicket;
        Datetime dateTimeNow = System.now();

        for (Ticket__c ticket : tickets) {
            Boolean isFutureTicket = ticket.Departure_Date_Time_Format__c > dateTimeNow;
            Boolean isActiveTicket = ticket.Ticket_Status__c == DLT_TicketConstants.TICKET_STATUS_ACTIVE;

            if (
                isFutureTicket &&
                isActiveTicket &&
                (futureActiveTicket == null ||
                ticket.Departure_Date_Time_Format__c < futureActiveTicket.Departure_Date_Time_Format__c)
            ) {
                futureActiveTicket = ticket;
            }
            if (
                isFutureTicket &&
                !isActiveTicket &&
                (futureCancelledTicket == null ||
                ticket.Departure_Date_Time_Format__c < futureCancelledTicket.Departure_Date_Time_Format__c)
            ) {
                futureCancelledTicket = ticket;
            }
            if (
                !isFutureTicket &&
                isActiveTicket &&
                (pastActiveTicket == null ||
                ticket.Departure_Date_Time_Format__c > pastActiveTicket.Departure_Date_Time_Format__c)
            ) {
                pastActiveTicket = ticket;
            }
            if (
                !isFutureTicket &&
                !isActiveTicket &&
                ((pastCancelledTicket == null ||
                ticket.Departure_Date_Time_Format__c > pastCancelledTicket.Departure_Date_Time_Format__c))
            ) {
                pastCancelledTicket = ticket;
            }
        }

        Ticket__c relevantTicket;
        if (futureActiveTicket != null) {
            relevantTicket = futureActiveTicket;
        } else if (pastActiveTicket != null) {
            relevantTicket = pastActiveTicket;
        } else if (futureCancelledTicket != null) {
            relevantTicket = futureCancelledTicket;
        } else if (pastCancelledTicket != null) {
            relevantTicket = pastCancelledTicket;
        }

        return relevantTicket;
    }

    private static Account getCustomer(GuestDetails guestDetails) {
        String guestEmail = guestDetails.email.toLowerCase().trim();
        List<Account> customer = [
            SELECT Id, FirstName, LastName, Customer_Email__pc, PersonContactId, Raw_Telephone_Number__c
            FROM Account
            WHERE Customer_Email__pc = :guestEmail
        ];
        Account customerAccount = new Account();
        if (customer.isEmpty()) {
            Id personAccountRecordTypeId = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName()
                .get('PersonAccount')
                .getRecordTypeId();
            customerAccount.FirstName = guestDetails.firstName;
            customerAccount.LastName = guestDetails.lastName;
            customerAccount.RecordTypeId = personAccountRecordTypeId;
            customerAccount.Customer_Email__pc = guestEmail;
            customerAccount.Raw_Telephone_Number__c = guestDetails.phone;
            customerAccount.Contact_Number__c = guestDetails.phone;
            try {
                insert customerAccount;
                List<Account> customerAfterInsert = [
                    SELECT Id, FirstName, LastName, Customer_Email__pc, PersonContactId, Raw_Telephone_Number__c
                    FROM Account
                    WHERE Id = :customerAccount.Id
                ];
                customerAccount = customerAfterInsert[0];
            } catch (Exception e) {
                System.debug('Case error: ' + e.getMessage());
            }
        } else {
            customerAccount = customer[0];
            if (
                String.isBlank(customerAccount.Raw_Telephone_Number__c) ||
                customerAccount.Raw_Telephone_Number__c != guestDetails.phone
            ) {
                customerAccount.Raw_Telephone_Number__c = guestDetails.phone;
                update customerAccount;
            }
        }
        return customerAccount;
    }

    private static Stations__c findStationByName(String stationName) {
        String searchword = '%' + stationName + '%';
        List<Stations__c> station = [SELECT Id, Name FROM Stations__c WHERE Name LIKE :searchword LIMIT 1];

        if (station.isEmpty()) {
            return null;
        }

        return station[0];
    }

    public class AccountDetails {
        public String id;
        public String contactId;
        public String contactName;
        public String accountName;
        public String customerEmail;
        public String contactEmail;
        public String loyaltyTier;
        public Date departureDate;
        public Date returnDate;
        public String hotelBooking;
        public String destination;

        public AccountDetails(
            String id,
            String contactId,
            String contactName,
            String accountName,
            String contactEmail,
            String customerEmail,
            String loyaltyTier,
            Date departureDate,
            Date returnDate,
            String hotelBooking,
            String destination
        ) {
            this.id = id;
            this.contactId = contactId;
            this.contactName = contactName;
            this.accountName = accountName;
            this.contactEmail = contactEmail;
            this.customerEmail = customerEmail;
            this.loyaltyTier = loyaltyTier;
            this.departureDate = departureDate;
            this.returnDate = returnDate;
            this.hotelBooking = hotelBooking;
            this.destination = destination;
        }
    }

    public class GuestDetails {
        @AuraEnabled
        public String email { get; set; }
        @AuraEnabled
        public String firstName { get; set; }
        @AuraEnabled
        public String lastName { get; set; }
        @AuraEnabled
        public String message { get; set; }
        @AuraEnabled
        public String phone { get; set; }
        @AuraEnabled
        public String dateOfTravel { get; set; }
        @AuraEnabled
        public String iban { get; set; }
        @AuraEnabled
        public String bicOrSwift { get; set; }
        @AuraEnabled
        public String accountNumber { get; set; }
        @AuraEnabled
        public String sortCode { get; set; }
        @AuraEnabled
        public String paypal { get; set; }
        @AuraEnabled
        public String savedFiles { get; set; }
        @AuraEnabled
        public String language { get; set; }
        @AuraEnabled
        public String birthDate { get; set; }
        @AuraEnabled
        public String membershipNumber { get; set; }
        @AuraEnabled
        public String toneOfContact { get; set; }
        @AuraEnabled
        public String destination { get; set; }
        @AuraEnabled
        public String selectedCountry { get; set; }
        @AuraEnabled
        public String bookingLocation { get; set; }
        @AuraEnabled
        public String bookingDate { get; set; }
        @AuraEnabled
        public String departureDate { get; set; }
        @AuraEnabled
        public String additionalAssistance { get; set; }
        @AuraEnabled
        public String additionalAssistanceOther { get; set; }

        public GuestDetails(
            String email,
            String firstName,
            String lastName,
            String message,
            String phone,
            String dateOfTravel,
            String iban,
            String bicOrSwift,
            String accountNumber,
            String sortCode,
            String paypal,
            String savedFiles,
            String language,
            String birthDate,
            String membershipNumber,
            String toneOfContact,
            String bookingLocation,
            String bookingDate,
            String departureDate,
            String additionalAssistance,
            String additionalAssistanceOther
        ) {
            this.email = email;
            this.firstName = firstName;
            this.lastName = lastName;
            this.message = message;
            this.phone = phone;
            this.dateOfTravel = dateOfTravel;
            this.iban = iban;
            this.bicOrSwift = bicOrSwift;
            this.accountNumber = accountNumber;
            this.sortCode = sortCode;
            this.paypal = paypal;
            this.savedFiles = savedFiles;
            this.language = language;
            this.birthDate = birthDate;
            this.membershipNumber = membershipNumber;
            this.toneOfContact = toneOfContact;
            this.bookingLocation = bookingLocation;
            this.bookingDate = bookingDate;
            this.departureDate = departureDate;
            this.additionalAssistance = additionalAssistance;
            this.additionalAssistanceOther = additionalAssistanceOther;
        }
    }
}